// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: courses_enrolled.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCoursesEnrolled = `-- name: CreateCoursesEnrolled :one
INSERT INTO courses_enrolled (id, created_at, updated_at,user_id,course_id)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, created_at, updated_at, user_id, course_id
`

type CreateCoursesEnrolledParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	CourseID  uuid.UUID
}

func (q *Queries) CreateCoursesEnrolled(ctx context.Context, arg CreateCoursesEnrolledParams) (CoursesEnrolled, error) {
	row := q.db.QueryRowContext(ctx, createCoursesEnrolled,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.CourseID,
	)
	var i CoursesEnrolled
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.CourseID,
	)
	return i, err
}

const deleteCoursesEnrolled = `-- name: DeleteCoursesEnrolled :exec
DELETE FROM courses_enrolled WHERE id = $1 AND user_id = $2
`

type DeleteCoursesEnrolledParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteCoursesEnrolled(ctx context.Context, arg DeleteCoursesEnrolledParams) error {
	_, err := q.db.ExecContext(ctx, deleteCoursesEnrolled, arg.ID, arg.UserID)
	return err
}

const getCoursesEnrolled = `-- name: GetCoursesEnrolled :many
SELECT id, created_at, updated_at, user_id, course_id FROM courses_enrolled WHERE user_id = $1
`

func (q *Queries) GetCoursesEnrolled(ctx context.Context, userID uuid.UUID) ([]CoursesEnrolled, error) {
	rows, err := q.db.QueryContext(ctx, getCoursesEnrolled, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoursesEnrolled
	for rows.Next() {
		var i CoursesEnrolled
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
