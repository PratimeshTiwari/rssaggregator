// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: courses.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (id, created_at, updated_at,name,url,user_id)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, created_at, updated_at, name, url, user_id
`

type CreateCourseParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getCourses = `-- name: GetCourses :many
SELECT id, created_at, updated_at, name, url, user_id FROM courses
`

func (q *Queries) GetCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
